{"version":3,"sources":["modules/basicAuth/BasicAuth.module.ts","modules/utils/LPUtils.module.ts","modules/formParser/background/fieldParsers/fieldParser.ts","modules/formParser/background/fieldParsers/passwordFieldParser.ts","modules/formParser/background/fieldParsers/userNameFieldParser.ts","modules/basicAuth/background/authCredential.ts","modules/basicAuth/background/basicAuth.ts","modules/formParser/background/formMetaData.ts","modules/formParser/background/formParser.ts","modules/utils/background/background.ts","modules/utils/background/siteParser.ts"],"names":[],"mappings":"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","file":"modules-background.js","sourcesContent":["// Shared definitions, objects and methods can be added here.\n","module LPUtils {\n    export function stringContains(str: string, checks: string | Array<string>) {\n        if (str && checks) {\n            if (!Array.isArray(checks)) {\n                checks = [checks];\n            }\n            for (let i = 0; i < checks.length; ++i) {\n                if (str.indexOf(checks[i]) > -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}","module LPFormParser {\n\n    export declare type ParsingOperation = (\n        formData: LPFormData,\n        metaData: FormMetaData,\n        tabState: LPTabState\n    ) => string | boolean;\n\n    export abstract class FieldParser {\n\n        protected static regexMatches(regex: RegExp, value: string | Array<string>): boolean {\n            let match = false;\n            if (regex) {\n                const tester = (regex: RegExp, val) => typeof val === 'string' && regex.test(val.toLowerCase());\n                if (Array.isArray(value)) {\n                    value.forEach((val) => match = match || tester(regex, val));\n                } else {\n                    match = tester(regex, value);\n                }\n            }\n            return match;\n        }\n\n        protected static getFormFieldRegex(fieldName): RegExp {\n            const expr = get_ff_translation(fieldName);\n            if (expr) {\n                return new RegExp(expr);\n            }\n        }\n\n        protected operations: Array<ParsingOperation> = [];\n\n        public parse(\n            formData: LPFormData,\n            metaData: FormMetaData,\n            tabState: LPTabState\n        ): string | boolean {\n            let value = null;\n            for (let operation of this.operations) {\n                value = operation(formData, metaData, tabState);\n                if (value || value === false) {\n                    break;\n                }\n            }\n            return value;\n        };\n    }\n}\n","module LPFormParser {\n    export class PasswordFieldParser extends FieldParser {\n\n        private static excludedFields = [];\n\n        constructor() {\n            super();\n\n            if (!PasswordFieldParser.excludedFields.length) {\n                PasswordFieldParser.excludedFields = [\n                    { type: 'attr', regex: FieldParser.getFormFieldRegex('ff_ssn_regexp') },\n                    { type: 'attr', regex: FieldParser.getFormFieldRegex('ff_cccsc_regexp') },\n                    { type: 'attr', regex: FieldParser.getFormFieldRegex('ff_securityanswer_regexp') },\n                    { type: 'attr', regex: FieldParser.getFormFieldRegex('ff_captcha_regexp') },\n                    { type: 'text', regex: FieldParser.getFormFieldRegex('ff_text_ssn_regexp') },\n                    { type: 'text', regex: FieldParser.getFormFieldRegex('ff_text_cccsc_regexp') }\n                ]\n            }\n\n            this.operations = [\n                PasswordFieldParser.excludedFieldOperation,\n                PasswordFieldParser.singlePasswordFieldOperation,\n                PasswordFieldParser.multiplePasswordOperation,\n                PasswordFieldParser.multiplePasswordsOneExistingOperation,\n                PasswordFieldParser.passwordLikeAttribute\n            ]\n        }\n\n        // Operations\n\n        private static excludedFieldOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): boolean {\n            for (let i = 0; i < formData.fields.length; ++i) {\n                let field = formData.fields[i];\n                for (let j = 0; j < PasswordFieldParser.excludedFields.length; ++j) {\n                    let data = PasswordFieldParser.excludedFields[j];\n                    if (!data.regex) { continue; }\n                    if (\n                        data.type === 'attr' &&\n                        FieldParser.regexMatches(data.regex, [field.id, field.attributes.name])\n                    ) {\n                        return false;\n                    } else if (\n                        data.type === 'text' &&\n                        FieldParser.regexMatches(data.regex, field.label)\n                    ) {\n                        return false;\n                    }\n                }\n            }\n            return null;\n        }\n\n        // If there is only one password field that is the password\n        private static singlePasswordFieldOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string {\n            if (metaData.uniquePasswords.length === 1) {\n                const password = metaData.uniquePasswords[0];\n                if (metaData.passwordsByValue[password].count === 2) {\n                    if (formData.fields.length === 2) {\n                        // With only two fields, we assume this a password change form.\n                        formData.passwordChangeForm = true;\n                    } else {\n                        // Otherwise, we assume this is an account creation form.\n                        formData.createAccountForm = true;\n                    }\n                }\n                return password;\n            }\n            return null;\n        }\n\n        // Check if a password field is repeated\n        private static multiplePasswordOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string {\n            for (let password of metaData.uniquePasswords) {\n                const pwdMetaData = metaData.passwordsByValue[password];\n                if (pwdMetaData.count > 1) {\n                    if (metaData.uniquePasswords.length === 2) {\n                        formData.passwordChangeForm = true;\n                        formData.originalPassword = metaData.uniquePasswords[0] === password ?\n                            metaData.uniquePasswords[1] :\n                            metaData.uniquePasswords[0];\n                    } else {\n                        formData.createAccountForm = true;\n                    }\n                    return password;\n                }\n            }\n            return null;\n        }\n\n        // Check if there are multiple passwords and one matches an existing\n        // account indicating a change password form\n        private static multiplePasswordsOneExistingOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string {\n            if (metaData.uniquePasswords.length === 2) {\n                const matchingPassword = PasswordFieldParser.findMatchingPassword(tabState.getSites(), metaData.uniquePasswords);\n                if (matchingPassword) {\n                    formData.passwordChangeForm = true;\n                    formData.originalPassword = matchingPassword;\n                    return metaData.uniquePasswords[0] === matchingPassword ?\n                        metaData.uniquePasswords[1] :\n                        metaData.uniquePasswords[0];\n                }\n            }\n            return null;\n        }\n\n        // Check if the name or id atribute looks like a password\n        private static passwordLikeAttribute(formData, metaData, tabState) {\n            for (let password of metaData.uniquePasswords) {\n                var passwordField = metaData.passwordsByValue[password].field;\n                var search = [\"pw\", \"pass\"];\n                if (\n                    LPUtils.stringContains(passwordField.attributes.name, search) ||\n                    LPUtils.stringContains(passwordField.id, search)\n                ) {\n                    return password;\n                }\n            }\n        }\n\n        // Utility methods\n\n        private static findMatchingPassword(sites, passwords) {\n            for (let i = 0; i < sites.length; ++i) {\n                let matchingPassword = LPUtils.SiteParser.findMatchingSitePassword(sites[i], passwords);\n                if (matchingPassword) {\n                    return matchingPassword;\n                }\n            }\n            return null;\n        }\n    }\n}\n","module LPFormParser {\n    export class UserNameFieldParser extends FieldParser {\n\n        // HTML5 validates e-mail addresses this way, see https://www.w3.org/TR/html5/forms.html#valid-e-mail-address\n        private static emailRegex = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/g;\n\n        private static userNameRegEx = FieldParser.getFormFieldRegex('ff_username_regexp');\n\n        constructor(private isStrict: boolean) {\n            super();\n\n            if (this.isStrict) {\n                this.operations = [\n                    UserNameFieldParser.userNameLikeLabelOperation,\n                    UserNameFieldParser.userNameLikeAttributeOperation\n                ];\n            } else {\n                this.operations = [\n                    UserNameFieldParser.userNameLikeLabelOperation,\n                    UserNameFieldParser.singleTextFieldOperation,\n                    UserNameFieldParser.multipleTextFieldOperation,\n                    UserNameFieldParser.nearPasswordFieldOpeartion,\n                    UserNameFieldParser.existingUserNameOperation,\n                    UserNameFieldParser.uniqueEmailFieldOperation,\n                    UserNameFieldParser.userNameLikeAttributeOperation\n                ];\n            }\n        }\n\n        // Check the label to see if it looks like a username\n        private static userNameLikeLabelOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            if (UserNameFieldParser.userNameRegEx) {\n                for (let field of formData.fields) {\n                    if (FieldParser.regexMatches(UserNameFieldParser.userNameRegEx, field.label)) {\n                        return field.value;\n                    }\n                }\n            }\n            return null;\n        }\n\n        private static userNameLikeAttributeOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            for (let textValue of metaData.uniqueTextValues) {\n                const textField = metaData.textFieldsByValue[textValue].field;\n                const search = 'user';\n                if (\n                    LPUtils.stringContains(textField.attributes.name, search) ||\n                    LPUtils.stringContains(textField.id, search)\n                ) {\n                    return textValue;\n                }\n            }\n            return null;\n        }\n\n        // If there is only one text field that is the username\n        private static singleTextFieldOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            if (metaData.uniqueTextValues.length === 1) {\n                let userName = metaData.uniqueTextValues[0];\n                if (metaData.textFieldsByValue[userName].count === 2) {\n                    formData.createAccountForm = true;\n                }\n                return userName;\n            }\n            return null;\n        }\n\n        // Check to see if a text field is repeated\n        private static multipleTextFieldOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            for (let textValue of metaData.uniqueTextValues) {\n                if (metaData.textFieldsByValue[textValue].count > 1) {\n                    formData.createAccountForm = true;\n                    return textValue;\n                }\n            }\n            return null;\n        }\n\n        // Check if the content script found a potential username\n        private static nearPasswordFieldOpeartion(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            let formFields = formData.fields;\n            for (let i = 1; i < formFields.length; ++i) {\n                const field = formFields[i];\n                if (field.type === 'password') {\n                    // Typically the username is the field before the password\n                    const potentialUsername = formFields[i - 1];\n                    if (potentialUsername.type !== 'password') {\n                        return potentialUsername.value;\n                    }\n                }\n            }\n            return null;\n        }\n\n        // Check to see if we already have this username\n        private static existingUserNameOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            for (let aid in g_sites) {\n                if (metaData.uniqueTextValues.indexOf(g_sites[aid].unencryptedUsername) > -1) {\n                    return g_sites[aid].unencryptedUsername;\n                }\n            }\n            return null;\n        }\n\n        // Check for a unique email field\n        private static uniqueEmailFieldOperation(formData: LPFormData, metaData: FormMetaData, tabState: LPTabState): string | boolean {\n            let uniqueEmails = [];\n            for (let textValue of metaData.uniqueTextValues) {\n                const matches = textValue.match(UserNameFieldParser.emailRegex);\n                if (matches && matches.length === 1) {\n                    uniqueEmails.push(textValue);\n                }\n            }\n            if (uniqueEmails.length === 1) {\n                return uniqueEmails[0];\n            }\n            return null;\n        }\n    }\n}","module lastpass {\n    export class AuthCredential {\n\n        constructor(public url:string, public userName: string = \"\", public password: string = \"\", public suppliedBefore: boolean = false) {\n\n        }\n\n        public cancelled: boolean = false;\n    }\n}\n","///<reference path=\"authCredential.ts\"/>\n\nmodule lastpass {\n    export class BasicAuth implements BasicAuth {\n\n        private authCredentials = {};\n\n        constructor() {\n            this.subscribeEvents();\n        }\n\n        private subscribeEvents() {\n            LPPlatform.onAuthRequired((details, tabID) => {\n                if (g_basicauth_feature_enabled && details.scheme === 'basic') {\n                    let credential = this.authCredentials[details.tabId] as AuthCredential;\n                    if (credential && !credential.cancelled) {\n                        if (!credential.suppliedBefore) {\n                            this.authCredentials[details.tabId] = new AuthCredential(details.url, credential.userName, credential.password, true);\n                            this.removeAuth(tabID);\n                            return {authCredentials: {username: credential.userName, password: credential.password}};\n                        }\n                    }\n                    if (!credential) {\n                        this.authCredentials[details.tabId] = new AuthCredential(details.url);\n                        return {cancel: true};\n                    }\n                }\n            });\n\n            LPPlatform.onTabClosed((tabID) => {\n                this.removeAuth(tabID);\n            });\n        }\n\n        private removeAuth(tabID: number) {\n            let cred = this.authCredentials[tabID];\n            if (cred) {\n                delete this.authCredentials[tabID];\n            }\n        }\n\n        public isBasicAuth(callback: (isBasicAuth: boolean, suppliedBefore: boolean) => void, frame?: LPFrameInfo) {\n            let credential = this.authCredentials[frame.tabID] as AuthCredential;\n            if (credential) {\n                if (credential.url !== frame.tabURL) {\n                    callback(false, false);\n                    this.removeAuth(frame.tabID);\n                    return;\n                } else if (!credential.cancelled) {\n                    callback(true, credential.suppliedBefore);\n                    return;\n                }\n            }\n            callback(false, false);\n        }\n\n        public setAuthCredential(userName: string, password: string, callback: () => void, frame?: LPFrameInfo) {\n            let credential = this.authCredentials[frame.tabID] as AuthCredential;\n            credential.userName = userName;\n            credential.password = password;\n            callback();\n        }\n\n        public cancelBasicAuth(frame?: LPFrameInfo) {\n            if (this.authCredentials[frame.tabID]) {\n                let cred = this.authCredentials[frame.tabID] as AuthCredential;\n                cred.cancelled = true;\n            }\n        }\n\n        public hasFeature(callback: (hasFeature: boolean) => void): void {\n            callback(true || g_basicauth_feature_enabled);\n        }\n\n        public isNotificationClosed(callback) {\n            callback(localStorage_getItem('basicAuthPopupState') === 'closed');\n        }\n\n        public closeNotification() {\n            localStorage_setItem('basicAuthPopupState', 'closed');\n        }\n    }\n}\n\n// Backwards compatibility.\nthis.basicAuth = new lastpass.BasicAuth();\n","///<reference path=\"../LPFormParser.module.ts\"/>\n\nmodule LPFormParser {\n\n    interface AggregationCount {\n        [key: string]: {\n            field: LPFormDataField;\n            count: number;\n        }\n    }\n\n    export class FormMetaData {\n\n        public passwordsByValue: AggregationCount = {};\n        public textFieldsByValue: AggregationCount = {};\n        public textFieldsByType: AggregationCount = {};\n        public uniqueTextValues: Array<string> = [];\n        public uniquePasswords: Array<string> = [];\n\n        constructor(formData: LPFormData) {\n            if (!formData.fields) {\n                return;\n            }\n\n            formData.fields.forEach((field: LPFormDataField) => {\n                if (field.type === 'password') {\n                    this.aggregateField(field, field.value, this.passwordsByValue);\n                } else {\n                    this.aggregateField(field, field.value, this.textFieldsByValue);\n                    this.aggregateField(field, field.type, this.textFieldsByType);\n                }\n            });\n\n            this.uniqueTextValues = Object.keys(this.textFieldsByValue);\n            this.uniquePasswords = Object.keys(this.passwordsByValue);\n        }\n\n        private aggregateField(field: LPFormDataField, value: string, aggregatedFields: AggregationCount) {\n            let aggregatedField = aggregatedFields[value];\n            if (!aggregatedField) {\n                aggregatedFields[value] = { field, count: 1 };\n            } else {\n                ++aggregatedField.count;\n            }\n        }\n    }\n}\n","///<reference path=\"../LPFormParser.module.ts\"/>\n\nmodule LPFormParser {\n    export class FormParser {\n\n        private _formData: LPFormData = null;\n        private _userNameField: LPFormDataField = null;\n        private _succeeded = false;\n        private _submitted = false;\n\n        constructor(tabState: LPTabState, formData: LPFormData, options: any) {\n\n            formData.fields = formData.fields || [];\n            const metaData = new LPFormParser.FormMetaData(formData);\n\n            if (!formData.password) {\n                if (!formData.generatedPassword) {\n                    const parsedPwd = new PasswordFieldParser().parse(formData, metaData, tabState);\n                    if (typeof parsedPwd === 'string') {\n                        formData.password = parsedPwd;\n                    }\n                } else {\n                    formData.password = formData.generatedPassword;\n                }\n            }\n\n            // User Name parsing\n            const userNameParser = new UserNameFieldParser(options && options.strict);\n            const parsedUserName = userNameParser.parse(formData, metaData, tabState);\n            let matchingSitesByUserName = [];\n            if (typeof parsedUserName === 'string') {\n                matchingSitesByUserName = tabState.getSites().filter(\n                    (site) => LPUtils.SiteParser.hasMatchingSiteUserName(site, parsedUserName)\n                );\n\n                const useExistingUserName =\n                    formData.username &&\n                    matchingSitesByUserName.length === 0 &&\n                    !formData.createAccountForm;\n                if (!useExistingUserName) {\n                    formData.username = parsedUserName;\n                }\n            }\n\n            // Find the userNameField.\n            if (formData.username && !formData.createAccountForm) {\n                for (let field of formData.fields) {\n                    if (field.value === formData.username) {\n                        this._userNameField = field;\n                        break;\n                    }\n                }\n            }\n\n            this._formData = formData;\n            this._submitted = !formData.generatedPassword;\n        }\n\n        public submitted(updatedValue?: boolean): boolean {\n            if (typeof updatedValue === 'boolean') {\n                this._submitted = updatedValue;\n            }\n            return this._submitted;\n        }\n\n        public succeeded(updatedValue?: boolean): boolean {\n            if (typeof updatedValue === 'boolean') {\n                this._succeeded = updatedValue;\n            }\n            return this._succeeded;\n        }\n\n        public getUsernameField(): LPFormDataField {\n            return this._userNameField;\n        }\n\n        public getUsername(): string {\n            return this._formData.username;\n        }\n\n        public getPassword(): string {\n            return this._formData.password;\n        }\n\n        public getOriginalPassword(): string {\n            return this._formData.originalPassword;\n        }\n\n        public getFormData(): LPFormData {\n            return this._formData;\n        }\n\n        public getFields(): Array<LPFormDataField> {\n            return this._formData.fields;\n        }\n\n        public isChangePasswordForm(): boolean {\n            return !!this._formData.passwordChangeForm;\n        }\n\n        public isCreateAccountForm(): boolean {\n            return !!this._formData.passwordChangeForm;\n        }\n\n        public isBasicAuthentication(): boolean {\n            return !!this._formData.basicAuthentication;\n        }\n\n        public shouldSaveFields(): boolean {\n            return !this.isChangePasswordForm() && !this.isCreateAccountForm();\n        }\n\n        public getURL(): string {\n            return this._formData.url;\n        }\n    }\n}","module LPUtils {\n    export function decrypt(site: LPSite, value: string): string {\n        return lpmdec_acct(value, true, site, g_shares);\n    };\n}","module LPUtils {\n    export class SiteParser {\n        public static findMatchingSitePassword(site: LPSite, passwords: string | Array<string>): string {\n            if (!Array.isArray(passwords)) {\n                passwords = [passwords];\n            }\n            let matchingIndex = passwords.indexOf(LPUtils.decrypt(site, site.password));\n            if (\n                matchingIndex === -1 &&\n                site.fields &&\n                site.fields.length > 0\n            ) {\n                for (var i = 0; i < site.fields.length; ++i) {\n                    const field = site.fields[i];\n                    if (field.type === 'password') {\n                        matchingIndex = passwords.indexOf(LPUtils.decrypt(site, field.value));\n                        if (matchingIndex > -1) {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (matchingIndex > -1) {\n                return passwords[matchingIndex];\n            }\n            return null;\n        }\n\n        public static hasMatchingSiteUserName(site: LPSite, userName: string): boolean {\n            if (!userName) {\n                return false;\n            }\n            if (this.userNamesMatch(site.unencryptedUsername, userName)) {\n                return true;\n            }\n            if (site.fields && site.fields.length) {\n                for (let field of site.fields) {\n                    switch (field.type) {\n                        case 'text':\n                        case 'email':\n                        case 'tel': {\n                            if (this.userNamesMatch(LPUtils.decrypt(site, field.value), userName)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        private static userNamesMatch(existingUserName: string, submittedUserName): boolean {\n            return existingUserName === submittedUserName ||\n                this.userNameInEmail(existingUserName, submittedUserName) ||\n                this.userNameInEmail(submittedUserName, existingUserName) ||\n                this.isMaskedUsername(existingUserName, submittedUserName);\n        }\n\n        private static userNameInEmail(userName: string, email: string): boolean {\n            if (email && email.indexOf('@') > -1) {\n                const parts = email.split('@');\n                return parts.length === 2 && userName === parts[0];\n            }\n            return false;\n        }\n\n        private static isMaskedUsername(existingUsername, submittedUsername) {\n            if (\n                submittedUsername.indexOf('*') > -1 ||\n                submittedUsername.indexOf(String.fromCharCode(8226)) > -1\n            ) {\n                return existingUsername.length === submittedUsername.length &&\n                    (\n                        existingUsername[0] === submittedUsername[0] ||\n                        existingUsername[existingUsername.length - 1] === submittedUsername[submittedUsername.length - 1]\n                    );\n            }\n            return false;\n        }\n    }\n}"]}